// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProductStatus {
  Published
  Draft
  Suspended
  OutOfStock
}

enum ProductType {
  Simple
  Variable
}

enum userRole {
  Admin
  Vendor
  Customer
}

model avatar {
  id        String   @id @default(uuid())
  original  String
  thumbnail String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      user     @relation(fields: [userId], references: [id])
  userId    String   @unique
}

model user {
  id                String    @id @default(uuid()) // Remove the `uid()` function from the `@default` directive
  email             String    @unique
  password          String?
  firstname         String?
  lastname          String?
  role              userRole? @default(Customer)
  profile           profile?
  profileId         String?
  emailVerified     DateTime?
  image             String?
  accounts          account[]
  avatar            avatar?
  name              String?
  isOnboardedVendor Boolean?
}

model account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model profile {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  name      String
  role      userRole? @default(Customer)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime  @default(now())
  shopId    Int
  shop      shop?
  user      user?     @relation(fields: [userId], references: [id])
  userId    String    @unique
}

model shop {
  id          String   @id @default(uuid())
  shopname    String?
  description String?
  address     String?
  logo        String?
  banner      String?
  slug        String?
  bankName    String?
  accountNo   String?
  country     String?
  city        String?
  state       String?
  zip         String?
  phoneNumber String?
  website     String?
  accountName String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  deletedAt   DateTime @default(now())
  profile     profile? @relation(fields: [profileId], references: [id])
  profileId   String?  @unique
  products    product?
}

model product {
  id                           String        @id @default(uuid())
  name                         String
  slug                         String?
  description                  String?
  type_id                      Int?
  price                        Float
  sale_price                   Int?
  language                     String
  min_price                    Float
  max_price                    Float
  sku                          Int           @default(autoincrement())
  quantity                     Int
  in_stock                     Boolean
  is_taxable                   Boolean
  shipping_class_id            Int?          @default(autoincrement())
  status                       ProductStatus @default(Published)
  product_type                 ProductType   @default(Simple)
  height                       Int?
  width                        Int?
  image                        Json
  image_id                     Int?
  video                        String?
  gallery                      Json[]
  gallery_id                   Int?
  deleted_at                   DateTime?     @default(now())
  created_at                   DateTime      @default(now())
  updated_at                   DateTime      @default(now())
  author_id                    String?
  manufacturer_id              String?
  is_digital                   Boolean?
  is_external                  Boolean?
  external_product_url         String?
  external_product_button_next String?
  ratings                      Float
  total_reviews                Int?
  rating_count                 Int?
  my_review                    String?
  in_wishlist                  Boolean?
  categories                   category[]
  shop                         shop?         @relation(fields: [shop_id], references: [id])
  shop_id                      String?       @unique
  type                         String?
  // Shop                      Shop          @relation(fields: [shop_id], references: [id])
  // images                    Image[]
  Image                        image?
  Gallery                      gallery?
  // categories                Category[]
}

model category {
  id        String    @id @unique @default(uuid())
  name      String
  slug      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  products  product[] @relation

  @@unique([name, slug])
}

model image {
  id        String   @id @default(uuid())
  original  String
  thumbnail String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  product   product  @relation(fields: [productId], references: [id])
  productId String   @unique
  gallery   gallery? @relation(fields: [galleryId], references: [id])
  galleryId String   @unique
}

model gallery {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  images    image[]
  product   product  @relation(fields: [productId], references: [id])
  productId String   @unique
}

model verificationToken {
  id      String   @id @default(uuid())
  token   String   @unique
  email   String
  expires DateTime

  @@unique([email, token])
}

model passwordResetToken {
  id      String   @id @default(uuid())
  token   String   @unique
  email   String
  expires DateTime

  @@unique([email, token])
}
